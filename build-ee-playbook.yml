---
- hosts: localhost
  gather_facts: false
  vars_files:
    - build-vars.yml
  tasks:
    #
    - name: Remove EE build directory if created by previous build
      ansible.builtin.file:
        path: "{{ ee_dir }}"
        state: absent
      when: ee_build
    #
    - name: Create EE build directory
      ansible.builtin.file:
        path: "{{ ee_dir }}"
        state: directory
      when: ee_build
    #
    - name: Copy build files to build directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ ee_dir }}/"
      with_fileglob: "config-ee.yml"
      when: ee_build
    #
    # ########################
    # PODMAN CONTAINER RUNTIME
    # ########################
    #
    #
    # BUILD Using Podman
    - name: EE Build Block - using podman
      block:
        - name: Build the EE using podman - This can take a LONG time - set a 60min async timeout
          ansible.builtin.shell:
            chdir: "{{ ee_dir }}"
            cmd: "ansible-builder build -v3 --file config-ee.yml --tag={{ ee_name }}:{{ ee_version }} --squash new"
          async: 3600
          poll: 15
          register: reg_buildee_result
        #
        - name: Tag the new local EE build with latest
          ansible.builtin.shell:
            chdir: "{{ ee_dir }}"
            cmd: "podman tag {{ ee_name }}:{{ ee_version }} {{ ee_name }}:latest"
          register: reg_tagee_result
        #
      always:
        # Make sure we prune all the temp images even in a failure
        - name: Prune unused images
          ansible.builtin.shell:
            cmd: "podman image prune -f --external"
        # Show build results
        - name: "Show build results"
          ansible.builtin.debug:
            var: reg_buildee_result
            # Change this to 0 to see output without -v
            verbosity: 1
        #
        - name: "Write build result to log file"
          ansible.builtin.copy:
            content: "{{ reg_buildee_result | to_nice_json }}"
            dest: "{{ ee_dir }}/buildee_results.log.json"
        # Debug tag latest results
        - name: "Debug tag latest results"
          ansible.builtin.debug:
            var: reg_tagee_result
            verbosity: 1
      when:
        - ee_build
        - ee_container_runtime == "podman"
    #
    #
    # PUBLISH Using Podman
    - name: EE Publish Block - using podman
      block:
        - name: Publish the ee image with version tag to container registry
          ansible.builtin.shell:
            cmd: "podman push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:{{ ee_version }}"
          register: reg_publish_results
        # LATEST TAG
        - name: Publish the ee image with latest tag to container registry
          ansible.builtin.shell:
            cmd: "podman push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:latest"
          register: reg_publish_latest_results
          when: ee_publish_latest
        #
      rescue:
        # Debug Failure Results
        - name: "Debug failure results"
          ansible.builtin.debug:
            msg:
            - "{{ omit if reg_publish_results is not defined else reg_publish_results }}"
            - "{{ omit if reg_publish_latest_results is not defined else reg_publish_latest_results }}"
            verbosity: 0
        # Print user friendly failure message
        - name: Publish Failure Message
          ansible.builtin.debug:
            msg:
              - "PUBLISH FAILED"
              - "This is usually because of lack of permissions to the container registry"
              - ""
              - "You may need to log into your registry.  For docker hub that would look like this:"
              - "podman login -u <docker-username> -p <docker-passwd-or-token> docker.io/<docker-username>"
              - ""
              - "After providing credentials attempt to publish again using these commands:"
              - "podman push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:{{ ee_version }}"
              - "podman push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:latest"
            verbosity: 0
      when: 
        - ee_publish
        - ee_container_runtime == "podman"
    #
    # ########################
    # DOCKER CONTAINER RUNTIME
    # ########################
    #
    #
    # BUILD Using Docker
    - name: EE Build Block - using docker
      block:
        - name: Build the EE using docker - This can take a LONG time - set a 60min async timeout
          ansible.builtin.shell:
            chdir: "{{ ee_dir }}"
            cmd: "ansible-builder build -v3 -container-runtime=docker --file config-ee.yml --tag={{ ee_name }}:{{ ee_version }}"
          async: 3600
          poll: 15
          register: reg_buildeed_result
        #
        - name: Tag the new local EE build with latest
          ansible.builtin.shell:
            chdir: "{{ ee_dir }}"
            cmd: "docker tag {{ ee_name }}:{{ ee_version }} {{ ee_name }}:latest"
          register: reg_tageed_result
        #
      always:
        # Make sure we prune all the temp images even in a failure
        - name: Prune unused images
          ansible.builtin.shell:
            cmd: "docker image prune -f; docker builder prune -f"
        # Show build results
        - name: "Show build results"
          ansible.builtin.debug:
            var: reg_buildeed_result
            # Change this to 0 to see output without -v
            verbosity: 1
        #
        - name: "Write build result to log file"
          ansible.builtin.copy:
            content: "{{ reg_buildeed_result | to_nice_json }}"
            dest: "{{ ee_dir }}/buildee_results.log.json"
        # Debug tag latest results
        - name: "Debug tag latest results"
          ansible.builtin.debug:
            var: reg_tageed_result
            verbosity: 1
      when: 
        - ee_build
        - ee_container_runtime == "docker"
    #
    #
    # PUBLISH Using Docker
    - name: EE Publish Block - using docker
      block:
        - name: Publish the ee image with version tag to container registry
          ansible.builtin.shell:
            cmd: "docker push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:{{ ee_version }}"
          register: reg_publishd_results
        # LATEST TAG
        - name: Publish the ee image with latest tag to container registry
          ansible.builtin.shell:
            cmd: "docker push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:latest"
          register: reg_publishd_latest_results
          when: ee_publish_latest
        #
      rescue:
        # Debug Failure Results
        - name: "Debug failure results"
          ansible.builtin.debug:
            msg:
            - "{{ omit if reg_publishd_results is not defined else reg_publishd_results }}"
            - "{{ omit if reg_publishd_latest_results is not defined else reg_publishd_latest_results }}"
            verbosity: 0
        # Print user friendly failure message
        - name: Publish Failure Message
          ansible.builtin.debug:
            msg:
              - "PUBLISH FAILED"
              - "This is usually because of lack of permissions to the container registry"
              - ""
              - "You may need to log into your registry.  For docker hub that would look like this:"
              - "docker login -u <docker-username> -p <docker-passwd-or-token> docker.io/<docker-username>"
              - ""
              - "After providing credentials attempt to publish again using these commands:"
              - "docker push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:{{ ee_version }}"
              - "docker push localhost/{{ ee_name }}:{{ ee_version }} docker://{{ ee_publish_url }}/{{ ee_name }}:latest"
            verbosity: 0
      when: 
        - ee_publish
        - ee_container_runtime == "docker"
