---
version: 3
# Note the version here is the ansible builder template version
# and has nothing to do with your ee image version tag
images:
  base_image:
    name: quay.io/centos/centos:stream9-minimal
    # name: quay.io/centos/centos:stream9
#
options:
  package_manager_path: /usr/bin/microdnf
  # package_manager_path: /usr/bin/dnf
#
dependencies:
  python_interpreter:
    package_system: python3.11
    python_path: /usr/bin/python3.11
  exclude:
    # python:
    #   - docker
    system:
      # added rpm to system req to ensure 3.11
      - python3-rpm
      # added six to python req to ensure 3.11
      - python3-six
      # added lxml to python req to ensure 3.11
      - python3-lxml
      # added cffi to python req to ensure 3.11
      - python3-cffi
      # added cryptography to python req to ensure 3.11
      - python3-cryptography
      # added pycparser to python req to ensure 3.11
      - python3-pycparser
    # all_from_collections:
    #   - junipernetworks.junos
  ansible_core:
    # Require minimum of 2.15 to get ansible-inventory --limit option
    package_pip: ansible-core>=2.19
    #package_pip: ansible-core>=2.15.0rc2,<2.16
  ansible_runner:
    package_pip: ansible-runner
  galaxy: |
    ---
    collections:
      - name: amazon.aws
        version: "==10.1.1"
      - name: ansible.netcommon
        version: "==8.1.0"
      - name: ansible.network
        version: "==5.0.0"
      - name: ansible.posix
        version: "==2.1.0"
      - name: ansible.security
        version: "==4.0.0"
      - name: ansible.snmp
        version: "==3.0.0"
      - name: ansible.utils
        version: "==6.0.0"
      - name: ansible.windows
        version: "==3.2.0"
      - name: ansible.yang
        version: "==3.0.0"
      - name: awx.awx
        version: "==24.6.1"
      - name: azure.azcollection
        version: "==3.8.0"
      - name: cloud.common
        version: "==5.0.0"
      - name: cloud.terraform
        version: "==4.0.0"
      - name: community.aws
        version: "==10.0.0"
      - name: community.crypto
        version: "==3.0.3"
      - name: community.general
        version: "==11.2.1"
      - name: community.windows
        version: "==3.0.1"
      - name: google.cloud
        version: "==1.7.0"
      - name: kubernetes.core
        version: "==6.1.0"
      - name: kubevirt.core
        version: "==2.2.3"
      - name: openstack.cloud
        version: "==2.4.1"
      - name: redhatinsights.insights
        version: "==1.3.0"
      - name: theforeman.foreman
        version: "==5.5.0"
  system: |
    git-core [platform:rpm]
    python3.11-devel [platform:rpm compile]
    libcurl-devel [platform:rpm compile]
    krb5-devel [platform:rpm compile]
    krb5-workstation [platform:rpm]
    krb5-libs [platform:rpm]
    subversion [platform:rpm]
    git-lfs [platform:rpm]
    sshpass [platform:rpm]
    rsync [platform:rpm]
    epel-release [platform:rpm]
    unzip [platform:rpm]
    zip [platform:rpm]
    findutils [platform:rpm]
    cmake [platform:rpm compile]
    gcc [platform:rpm compile]
    gcc-c++ [platform:rpm compile]
    make [platform:rpm compile]
    openssl-devel [platform:rpm compile]
    openssl [platform:rpm]
    libxml2-devel [platform:rpm]
  python: |
    ansible-sign
    ncclient
    paramiko
    pykerberos
    pyOpenSSL
    pypsrp[kerberos,credssp]
    pywinrm[kerberos,credssp]
    toml
    pexpect>=4.5
    python-daemon
    pyyaml
    rpm
    six
    lxml
    cffi
    cryptography
    pycparser
    receptorctl
    dnspython
    jsonpatch
    netaddr
    selinux
    xmltodict
#
#additional_build_files:
#  - src: files/ansible.cfg
#    dest: configs
#
additional_build_steps:
  # prepend_base:
  append_base:
    - RUN $PYCMD -m pip install -U pip
    # SymLink `python` -> `python3.11`
    - RUN alternatives --install /usr/bin/python python /usr/bin/python3.11 311 && alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 311
  # prepend_galaxy:
  # append_galaxy:
  # prepend_builder:
  # append_builder:
  # prepend_final:
  append_final:
    # Receptor
    - COPY --from=quay.io/ansible/receptor:devel /usr/bin/receptor /usr/bin/receptor
    - RUN mkdir -p /var/run/receptor && git lfs install --system
    # Clean Build
    - RUN $PKGMGR clean all && rm -rf /tmp/* && truncate -s 0 /var/log/*log && truncate -s 0 /var/log/*/*log
